import nltk
nltk.download('punkt')
from nltk.corpus import stopwords
nltk.download('stopwords')
from nltk.tokenize import word_tokenize
from nltk.probability import FreqDist
from nltk.tag import pos_tag
nltk.download('averaged_perceptron_tagger')
text=input("Enter text:")
print(text)

words=word_tokenize(text)
print("tokenize word")
print(words)

words=[word.lower() for word in words]

fdist=FreqDist(words)
print("word frequency")
for word,freq in fdist.items():
    print(f"{word}:{freq} ")

stop_words=set(stopwords.words("english"))
filtered_words=[words for word in words if word.casefold() not in stop_words]
print(filtered_words)

pos_tags=pos_tag(words)
print(pos_tags)


#nqueen
def print_board(board):
    for row in board:
        print(" ".join(row))

def is_safe(board,row,col):
    for i in range(col):
        if board[row][i]=="Q":
            return False
    
    for i,j in zip(range(row,-1,-1),range(col,-1,-1)):
        if board[i][j]=='Q':
            return False
    
    for i,j in zip(range(row,len(board),1),range(col,-1,-1)):
        if board[i][j]=='Q':
            return False
    
    return True

def solve(board,col):
    if col>=len(board):
        return True
    
    for i in range(len(board)):
        if is_safe(board,i,col):
            board[i][col]='Q'
            if solve(board,col+1):
                return True
        
        board[i][col]='.'
    return False
        
n=int(input("Enter number of queens:"))
board=[["."for i in range(n)]for j in range(n)]

if solve(board,0):
    print_board(board)
    
else:
    print("solution not found")
    
    
    
#water jug    
max1=int(input("Enter value of max1:"))
max2=int(input("Enter value of max2:"))
fill=int(input("Enter value of fill:"))

def pour(jug1,jug2):
  print("%d \t %d"%(jug1,jug2))
  if jug2==fill:
    return
  
  elif jug1!=0 and jug2==0:
    pour(0,jug1)

  elif jug1==fill:
    pour(jug1,0)
  
  elif jug1<max1:
    pour(max1,jug2)
  
  elif jug1<(max2-jug2):
    pour(0,jug1+jug2)
  
  else:
    pour(jug1-(max2-jug2),(max2-jug2)+jug2)

print("jug1\t jug2")
pour(0,0)



#tsp
import sys
def nearest_neighbor(curr, unvisited, dist_matrix):
  nearest = sys.maxsize
  neighbor = None
  for city in unvisited:
      if dist_matrix[curr][city] < nearest:
        nearest = dist_matrix[curr][city]
        neighbor = city
  return neighbor, nearest

def tsp_nn(dist_matrix):
    n=len(dist_matrix)
    tour=[0]*5
    unvisited=set(range(1,n))
    curr_city=0
    
    for i in range(1,n):
        next_city,dist=nearest_neighbor(curr_city,unvisited,dist_matrix)
        tour[i]=next_city
        curr_city=next_city
        unvisited.remove(next_city)
        
    
    tour[0]=0
    cost=sum(dist_matrix[tour[i]][tour[i+1]] for i in range(n-1))
    cost+=dist_matrix[tour[n-1]][tour[0]]
    return tour,cost

import numpy as np 
rows=int(input("enter rows:"))
column=int(input("enter column:"))
print("enter matrix:")
elements=list(map(int,input().split()))

dist_matrix=np.array(elements).reshape(rows,column)
print(dist_matrix)

tour,cost=tsp_nn(dist_matrix)
print("tour:",tour)
print("cost:",cost)     


enter rows:4
enter column:4
enter matrix:
0 5 15 4 5 0 35 25 15 35 0 30 4 25 30 0
[[ 0  5 15  4]
 [ 5  0 35 25]
 [15 35  0 30]
 [ 4 25 30  0]]
tour: [0, 3, 1, 2, 0]
cost: 79



#tic tac toe

from math import inf as infinity
from random import choice
import platform
import time
from os import system

HUMAN = -1
COMP = +1
board = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
]

def evaluate(state):
    if wins(state, COMP):
        score = +1
    elif wins(state, HUMAN):
        score = -1
    else:
        score = 0
    return score

def wins(state, player):
    win_state = [
        [state[0][0], state[0][1], state[0][2]],
        [state[1][0], state[1][1], state[1][2]],
        [state[2][0], state[2][1], state[2][2]],
        [state[0][0], state[1][0], state[2][0]],
        [state[0][1], state[1][1], state[2][1]],
        [state[0][2], state[1][2], state[2][2]],
        [state[0][0], state[1][1], state[2][2]],
        [state[2][0], state[1][1], state[0][2]],
    ]
    if [player, player, player] in win_state:
        return True
    else:
        return False

def game_over(state):


    return wins(state, HUMAN) or wins(state, COMP)

def empty_cells(state):
    cells = []
    for x, row in enumerate(state):
        for y, cell in enumerate(row):
            if cell == 0:
                cells.append([x, y])
    return cells

def valid_move(x, y):
    if [x, y] in empty_cells(board):
        return True
    else:
        return False

def set_move(x, y, player):
    if valid_move(x, y):
        board[x][y] = player
        return True
    else:
        return False

def minimax(state, depth, player):
    if player == COMP:
        best = [-1, -1, -infinity]
    else:
        best = [-1, -1, +infinity]
    if depth == 0 or game_over(state):
        score = evaluate(state)
        return [-1, -1, score]
    for cell in empty_cells(state):
        x, y = cell[0], cell[1]
        state[x][y] = player
        score = minimax(state, depth - 1, -player)
        state[x][y] = 0
        score[0], score[1] = x, y

    if player == COMP:
        if score[2] > best[2]:
            best = score # max value
        else:
            if score[2] < best[2]:
                best = score # min value
        return best

def clean():
    """
    Clears the console
    """
    os_name = platform.system().lower()
    if 'windows' in os_name:
        system('cls')
    else:
        system('clear')

def render(state, c_choice, h_choice):
    """
    Print the board on console
    :param state: current state of the board
    """
    chars = {
        -1: h_choice,
        +1: c_choice,
        0: ' '
    }
    str_line = '---------------'
    print('\n' + str_line)
    for row in state:
        for cell in row:
            symbol = chars[cell]
            print(f'| {symbol} |', end='')
        print('\n' + str_line)

def ai_turn(c_choice, h_choice):
    """
    It calls the minimax function if the depth < 9,
    else it choices a random coordinate.
    :param c_choice: computer's choice X or O
    :param h_choice: human's choice X or O
    :return:
    """
    depth = len(empty_cells(board))
    if depth == 0 or game_over(board):
        return
    clean()
    print(f'Computer turn [{c_choice}]')
    render(board, c_choice, h_choice)
    if depth == 9:
        x = choice([0, 1, 2])
        y = choice([0, 1, 2])
    else:
        move = minimax(board, depth, COMP)
        x, y = move[0], move[1]
    set_move(x, y, COMP)
    time.sleep(1)

def human_turn(c_choice, h_choice):
    depth = len(empty_cells(board))
    if depth == 0 or game_over(board):
        return
    # Dictionary of valid moves
    move = -1
    moves = {
        1: [0, 0], 2: [0, 1], 3: [0, 2],
        4: [1, 0], 5: [1, 1], 6: [1, 2],
        7: [2, 0], 8: [2, 1], 9: [2, 2],
    }
    clean()
    print(f'Human turn [{h_choice}]')
    render(board, c_choice, h_choice)
    while move < 1 or move > 9:
        try:
            move = int(input('Use numpad (1..9): '))
            coord = moves[move]
            can_move = set_move(coord[0], coord[1], HUMAN)
            if not can_move:
                print('Bad move')
                move = -1
        except (EOFError, KeyboardInterrupt):

                print('Bye')
                exit()
        except (KeyError, ValueError):
                print('Bad choice')

def main():
    """
    Main function that calls all functions
    """
    clean()
    h_choice = '' # X or O
    c_choice = '' # X or O
    first = '' # if human is the first
    # Human chooses X or O to play
    while h_choice != 'O' and h_choice != 'X':
        try:
            print('')
            h_choice = input('Choose X or O\nChosen: ').upper()
        except (EOFError, KeyboardInterrupt):
            print('Bye')
            exit()
        except (KeyError, ValueError):
            print('Bad choice')
    # Setting computer's choice
    if h_choice == 'X':
        c_choice = 'O'
    else:
        c_choice = 'X'
    # Human may starts first
    clean()
    while first != 'Y' and first != 'N':
        try:
            first = input('First to start?[y/n]: ').upper()
        except (EOFError, KeyboardInterrupt):
            print('Bye')
            exit()
        except (KeyError, ValueError):
            print('Bad choice')
    # Main loop of this game
    while len(empty_cells(board)) > 0 and not game_over(board):
        if first == 'N':
            ai_turn(c_choice, h_choice)
            first = ''
        human_turn(c_choice, h_choice)
        ai_turn(c_choice, h_choice)
     # Game over message
        if wins(board, HUMAN):
            clean()
            print(f'Human turn [{h_choice}]')
            render(board, c_choice, h_choice)
            print('YOU WIN!')
        elif wins(board, COMP):
            clean()
            print(f'Computer turn [{c_choice}]')
            render(board, c_choice, h_choice)
            print('YOU LOSE!')
        else:
            clean()
            render(board, c_choice, h_choice)
            print('DRAW!')
        exit()

        if __name__== '__main__':
        main()
